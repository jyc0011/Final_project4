<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.finalproject.team4.shouldbe.mapper.ChatMapper">
    <select id="countUserChatRooms" resultType="int">
        SELECT COUNT(*)
        FROM chat_list
        WHERE from_id = #{userId}
           OR to_id = #{userId}
    </select>

    <select id="getCurrentUserChatRooms" resultType="ChatRoomVO">
        SELECT *
        FROM chat_list
        WHERE (from_id = #{userId} OR to_id = #{userId})
          AND NOT EXISTS (
            SELECT 1
            FROM chat_visible
            WHERE chat_visible.chat_id = chat_list.chat_id
              AND chat_visible.state = #{userId}
        )
        ORDER BY last_time DESC
            LIMIT #{pvo.offsetPoint}, #{pvo.onePageRecord}
    </select>

    <select id="countUnreadMessages" resultType="int">
        SELECT COUNT(*)
        FROM message
        WHERE chat_id = #{chatId}
          AND is_read = 0
          AND is_from_id != #{isFromId}
    </select>

    <select id="getMessagesByChatId" resultType="MessageVO">
        SELECT *
        FROM message
        WHERE chat_id = #{chatId}
        ORDER BY send_time
    </select>

    <update id="updateMessagesAsRead">
        UPDATE message
        SET is_read = 1
        WHERE chat_id = #{chatId}
          AND is_read = 0
    </update>

    <select id="getProfileImg" resultType="String">
        SELECT profile_img
        FROM users
        WHERE user_id = #{userId}
    </select>

    <select id="getUserLang" resultType="String">
        SELECT nation
        FROM users
        WHERE user_id = #{userId}
    </select>

    <insert id="insertMessage" useGeneratedKeys="true" keyProperty="msg_id">
        INSERT INTO message (chat_id, is_from_id, content, is_read)
        VALUES (#{chat_id}, #{is_from_id}, #{content}, 0)
    </insert>

    <insert id="insertTransMessage">
        INSERT INTO msg_trans (msg_id, trans_content)
        VALUES (#{msgId}, #{s})
    </insert>

    <update id="insertLastMessage">
        UPDATE chat_list
        SET last_content= #{content},
            last_time   = NOW()
        WHERE chat_id = #{chat_id}
    </update>

    <select id="countUserPartner" resultType="int">
        SELECT COUNT(*)
        FROM users
        WHERE user_id != #{userId}
          AND NOT EXISTS (
            SELECT 1
            FROM chat_list
            WHERE (from_id = #{userId} AND to_id = users.user_id)
           OR (to_id = #{userId} AND from_id = users.user_id)
            )
    </select>

    <select id="getUserPartnerList" resultType="UserVO">
        SELECT user_id AS userid, user_name AS username, email, nation, sex, lang, profile_img, profile_content
        FROM users
        WHERE user_id != #{userId}
          AND NOT EXISTS (
            SELECT 1
            FROM chat_list
            WHERE (from_id = #{userId} AND to_id = users.user_id)
           OR (to_id = #{userId} AND from_id = users.user_id)
            )
            LIMIT #{pvo.offsetPoint}, #{pvo.onePageRecord}
    </select>

    <insert id="createChatRoom" useGeneratedKeys="true" keyProperty="chat_id">
        INSERT INTO chat_list (from_id, to_id)
        VALUES (#{from_id}, #{to_id})
    </insert>

    <insert id="createChatRoomState">
        INSERT INTO chat_visible (chat_id)
        VALUES (#{chatId})
    </insert>

    <update id="updateLastContent">
        UPDATE chat_list
        SET last_content = #{last_content}
        WHERE chat_id = #{chatId}
    </update>

    <insert id="storeEncryptionKey">
        INSERT INTO chat_encryption_keys (chat_id, user_id, symmetric_key)
        VALUES (#{chat_id}, #{user_id}, #{symmetric_key})
    </insert>

    <select id="getSharedKey" resultType="String">
        SELECT symmetric_key
        FROM chat_encryption_keys
        WHERE chat_id = #{chatId} AND user_id = #{userId}
    </select>

    <select id="findMessageInfo" resultType="MessageVO">
        SELECT is_from_id, chat_id, content
        FROM message
        WHERE msg_id = #{msgId}
    </select>

    <insert id="reportMessage">
        INSERT INTO message_report (user_id, msg_id, content)
        VALUES (#{userId}, #{msgId}, #{content})
    </insert>

    <select id="getChatByChatId" resultType="ChatRoomVO">
        SELECT *
        FROM chat_list
        WHERE chat_id = #{chatId}
    </select>

    <insert id="saveMessageToMypage">
        INSERT INTO save_message (msg_id, save_user_id, content)
        VALUES (#{msgId},#{userId}, #{content})
    </insert>

    <select id="getTransMsg" resultType="String">
        SELECT trans_content
        FROM msg_trans
        WHERE msg_id = #{msgId}
    </select>
    <select id="countFriendRelationship" resultType="int">
        SELECT COUNT(*)
        FROM friend
        WHERE following_user_id = #{followingUserId}
        AND followed_user_id = #{followedUserId}
    </select>

    <insert id="insertFriend">
        INSERT INTO friend (following_user_id, followed_user_id)
        VALUES (#{followingUserId}, #{followedUserId})
    </insert>

    <insert id="insertBlockList">
        INSERT INTO block_list (block_id, user_id, block_reason)
        VALUES (#{blockId}, #{userId}, #{reason})
    </insert>

    <delete id="friendDelete">
        DELETE
        FROM friend
        WHERE followed_user_id = #{followed_user_id}
         AND following_user_id = #{following_user_id}
    </delete>

    <select id="getStateByChatId" resultType="String">
        SELECT state FROM chat_visible WHERE chat_id = #{chatId}
    </select>

    <update id="updateState">
        UPDATE chat_visible SET state = #{userId} WHERE chat_id = #{chatId}
    </update>

    <delete id="deleteChatAndRelatedData">
        DELETE FROM chat_list WHERE chat_id = #{chatId};
    </delete>
</mapper>